//Aim: Design a program for a basic banking system that calculates the average account balance by dividing the total balance by the number of account holders and verifies transaction IDs from an array. The program should demonstrate robust exception handling using multiple try-catch blocks to manage two specific scenarios: an ArithmeticException for division by zero when there are no account holders and an ArrayIndexOutOfBoundsException for accessing invalid indices in the transaction ID array.
public class BasicBankingSystem {
    private static double[] accountBalances = {1000.50, 2500.75, 3000.00, 1200.30};
    

    private static int[] transactionIDs = {101, 102, 103, 104};

    public static double calculateAverageBalance() {
        double totalBalance = 0;
        try {
            for (double balance : accountBalances) {
                totalBalance += balance;
            }

      
            double averageBalance = totalBalance / accountBalances.length;
            return averageBalance;
        } catch (ArithmeticException e) {
            System.out.println("Error: Cannot divide by zero. No account holders found.");
            return 0; 
        }
    }

  
    public static void verifyTransactionID(int transactionIndex) {
        try {
    
            System.out.println("Verifying transaction ID: " + transactionIDs[transactionIndex]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Invalid transaction ID index. Please provide a valid index.");
        }
    }

    public static void main(String[] args) {
  
        double averageBalance = calculateAverageBalance();
        if (averageBalance != 0) {
            System.out.println("Average account balance: $" + averageBalance);
        }

    
        System.out.println("\nVerifying valid transaction ID (index 2):");
        verifyTransactionID(2); 

        System.out.println("\nVerifying invalid transaction ID (index 5):");
        verifyTransactionID(5); 
    }
}
//output:
Average account balance: $1925.3875

Verifying valid transaction ID (index 2):
Verifying transaction ID: 103

Verifying invalid transaction ID (index 5):
ERROR!
Error: Invalid transaction ID index. Please provide a valid index.
